{
  "address": "0xcecA0A7C061ae03548349cE6efEfF0995B0ABBc3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mainContract",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_anyswapRouters",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "mainContract",
          "type": "address"
        }
      ],
      "name": "MainContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SupportedRouterUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_bridgeParams",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "bridgeResp",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mainContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "setSupportedRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportedRouters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "transfers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mainContract",
          "type": "address"
        }
      ],
      "name": "updateMainContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x34f3168808c77811d2c2e9e48d7a833cb8f711417fded35d1b0512f080ab86f4",
  "receipt": {
    "to": null,
    "from": "0x8b5F94a2c2e23eE8cC0Ff56872aF973243eF7628",
    "contractAddress": "0xcecA0A7C061ae03548349cE6efEfF0995B0ABBc3",
    "transactionIndex": 75,
    "gasUsed": "1256170",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000100000000000000000000000000000000000008000000000000000000000001000000000000200000000000000000000000020000000000000100000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x33c0b043c6edca2dc8477a848877ec5f9815ae6c097b3940a3bab178be50d367",
    "transactionHash": "0x34f3168808c77811d2c2e9e48d7a833cb8f711417fded35d1b0512f080ab86f4",
    "logs": [
      {
        "transactionIndex": 75,
        "blockNumber": 21323373,
        "transactionHash": "0x34f3168808c77811d2c2e9e48d7a833cb8f711417fded35d1b0512f080ab86f4",
        "address": "0xcecA0A7C061ae03548349cE6efEfF0995B0ABBc3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b5f94a2c2e23ee8cc0ff56872af973243ef7628"
        ],
        "data": "0x",
        "logIndex": 199,
        "blockHash": "0x33c0b043c6edca2dc8477a848877ec5f9815ae6c097b3940a3bab178be50d367"
      }
    ],
    "blockNumber": 21323373,
    "cumulativeGasUsed": "9120356",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5F3cf896C1E18550389Ee4C6b298907649129F21",
    [
      "0xd1c5966f9f5ee6881ff6b261bbeda45972b1b5f3",
      "0xabd380327fe66724ffda91a87c772fb8d00be488",
      "0x92c079d3155c2722dbf7e65017a5baf9cd15561c",
      "0xf9736ec3926703e85c843fc972bd89a7f8e827c0"
    ]
  ],
  "numDeployments": 2,
  "solcInputHash": "cc764e07c74dfaf8370243e068d6546a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mainContract\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_anyswapRouters\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mainContract\",\"type\":\"address\"}],\"name\":\"MainContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SupportedRouterUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_bridgeParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"bridgeResp\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSupportedRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transfers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mainContract\",\"type\":\"address\"}],\"name\":\"updateMainContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridges/AnyswapAdapter.sol\":\"AnyswapAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/bridges/AnyswapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../interfaces/IBridgeAdapter.sol\\\";\\nimport \\\"../interfaces/IBridgeAnyswap.sol\\\";\\n\\ncontract AnyswapAdapter is IBridgeAdapter, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    address public mainContract;\\n    mapping(address => bool) public supportedRouters;\\n    mapping(bytes32 => bool) public transfers;\\n\\n    event MainContractUpdated(address mainContract);\\n    event SupportedRouterUpdated(address router, bool enabled);\\n\\n    modifier onlyMainContract() {\\n        require(msg.sender == mainContract, \\\"caller is not main contract\\\");\\n        _;\\n    }\\n\\n    constructor(address _mainContract, address[] memory _anyswapRouters) {\\n        mainContract = _mainContract;\\n\\n        for (uint256 i = 0; i < _anyswapRouters.length; i++) {\\n            require(_anyswapRouters[i] != address(0), \\\"nop\\\");\\n            supportedRouters[_anyswapRouters[i]] = true;\\n        }\\n    }\\n\\n    struct AnyswapParams {\\n        // a unique identifier that is uses to dedup transfers\\n        // this value is the a timestamp sent from frontend, but in theory can be any unique number\\n        uint64 nonce;\\n        // the wrapped any token of the native\\n        address anyToken;\\n        // the target anyswap Router, should be in the <ref>supportedRouters</ref>\\n        address router;\\n    }\\n\\n    function bridge(\\n        uint64 _dstChainId,\\n        address _receiver,\\n        uint256 _amount,\\n        address _token, // Note, here uses the address of the native\\n        bytes memory _bridgeParams,\\n        bytes memory //_requestMessage // Not used for now, as Anyswap messaging is not supported in this version\\n    ) external payable onlyMainContract returns (bytes memory bridgeResp) {\\n        AnyswapParams memory params = abi.decode((_bridgeParams), (AnyswapParams));\\n        require(supportedRouters[params.router], \\\"illegal router\\\");\\n\\n        bytes32 transferId = keccak256(\\n            abi.encodePacked(_receiver, _token, _amount, _dstChainId, params.nonce, uint64(block.chainid))\\n        );\\n        require(transfers[transferId] == false, \\\"transfer exists\\\");\\n        transfers[transferId] = true;\\n\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n        IERC20(_token).safeApprove(params.router, _amount);\\n        if (IUnderlying(params.anyToken).underlying() != address(0)) {\\n            IBridgeAnyswap(params.router).anySwapOutUnderlying(params.anyToken, _receiver, _amount, _dstChainId);\\n        } else {\\n            IBridgeAnyswap(params.router).anySwapOut(params.anyToken, _receiver, _amount, _dstChainId);\\n        }\\n        IERC20(_token).safeApprove(params.router, 0);\\n\\n        return abi.encodePacked(transferId);\\n    }\\n\\n    function updateMainContract(address _mainContract) external onlyOwner {\\n        mainContract = _mainContract;\\n        emit MainContractUpdated(_mainContract);\\n    }\\n\\n    function setSupportedRouter(address _router, bool _enabled) external onlyOwner {\\n        bool enabled = supportedRouters[_router];\\n        require(enabled != _enabled, \\\"nop\\\");\\n        supportedRouters[_router] = _enabled;\\n        emit SupportedRouterUpdated(_router, _enabled);\\n    }\\n}\\n\",\"keccak256\":\"0xde6e0ce740a4592880dd75e55eec6b93d15bfd0139b541c326ce7851c7aeadf4\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IBridgeAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\ninterface IBridgeAdapter {\\n    function bridge(\\n        uint64 _dstChainId,\\n        // the address that the fund is transfered to on the destination chain\\n        address _receiver,\\n        uint256 _amount,\\n        address _token,\\n        // Bridge transfers quoted and abi encoded by chainhop backend server.\\n        // Bridge adapter implementations need to decode this themselves.\\n        bytes memory _bridgeParams,\\n        // The message to be bridged alongside the transfer.\\n        // Note if the bridge adapter doesn't support message passing, the call should revert when\\n        // this field is set.\\n        bytes memory _requestMessage\\n    ) external payable returns (bytes memory bridgeResp);\\n}\\n\",\"keccak256\":\"0x83846dd37f0913ef77647a711ff8b1c53cbd72f6a0fc51d88ef1ad62412ee045\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IBridgeAnyswap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\ninterface IBridgeAnyswap {\\n\\n    // Swaps `amount` `token` from this chain to `toChainID` chain with recipient `to`\\n    function anySwapOut(address token, address to, uint amount, uint toChainID) external;\\n\\n    // Swaps `amount` `token` from this chain to `toChainID` chain with recipient `to` by minting with `underlying`\\n    function anySwapOutUnderlying(address token, address to, uint amount, uint toChainID) external;\\n}\\n\\ninterface IUnderlying {\\n    function underlying() external view returns (address);\\n}\",\"keccak256\":\"0xc070917527511428939cada66bf4b16cdd756f3d642c6ab17839bab12bd91c15\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620016dd380380620016dd8339810160408190526200003491620002da565b6200003f336200012c565b600180546001600160a01b0319166001600160a01b03841617905560005b8151811015620001235760006001600160a01b031682828151811062000087576200008762000339565b60200260200101516001600160a01b031603620000c15760405162461bcd60e51b8152600401620000b8906200034f565b60405180910390fd5b600160026000848481518110620000dc57620000dc62000339565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806200011a8162000387565b9150506200005d565b505050620003a4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006001600160a01b0382165b92915050565b6200019a816200017c565b8114620001a657600080fd5b50565b805162000189816200018f565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715620001f457620001f4620001b6565b6040525050565b60006200020760405190565b9050620002158282620001cc565b919050565b60006001600160401b03821115620002365762000236620001b6565b5060209081020190565b60006200025762000251846200021a565b620001fb565b83815290506020808201908402830185811115620002785762000278600080fd5b835b81811015620002a05780620002908882620001a9565b845250602092830192016200027a565b5050509392505050565b600082601f830112620002c057620002c0600080fd5b8151620002d284826020860162000240565b949350505050565b60008060408385031215620002f257620002f2600080fd5b6000620003008585620001a9565b92505060208301516001600160401b03811115620003215762000321600080fd5b6200032f85828601620002aa565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b602080825281016200018981600381526206e6f760ec1b602082015260400190565b634e487b7160e01b600052601160045260246000fd5b600060001982036200039d576200039d62000371565b5060010190565b61132980620003b46000396000f3fe6080604052600436106100965760003560e01c80639879c48d11610069578063df8bbc591161004e578063df8bbc591461018f578063f2fde38b146101af578063f8e9c5c0146101cf57600080fd5b80639879c48d1461013f578063d270e7ab1461016f57600080fd5b80633c64f04b1461009b578063715018a6146100e1578063834bc3ea146100f85780638da5cb5b14610118575b600080fd5b3480156100a757600080fd5b506100cb6100b63660046109bd565b60036020526000908152604090205460ff1681565b6040516100d891906109e8565b60405180910390f35b3480156100ed57600080fd5b506100f66101ef565b005b61010b610106366004610b31565b610203565b6040516100d89190610c4f565b34801561012457600080fd5b506000546001600160a01b03165b6040516100d89190610c69565b34801561014b57600080fd5b506100cb61015a366004610c77565b60026020526000908152604090205460ff1681565b34801561017b57600080fd5b50600154610132906001600160a01b031681565b34801561019b57600080fd5b506100f66101aa366004610c77565b6104e0565b3480156101bb57600080fd5b506100f66101ca366004610c77565b61054b565b3480156101db57600080fd5b506100f66101ea366004610cab565b610585565b6101f761062f565b6102016000610659565b565b6001546060906001600160a01b031633146102395760405162461bcd60e51b815260040161023090610d1f565b60405180910390fd5b60008380602001905181019061024f9190610da3565b6040808201516001600160a01b031660009081526002602052205490915060ff1661028c5760405162461bcd60e51b815260040161023090610df8565b80516040516000916102aa918a9189918b918e914690602001610e58565b60408051601f1981840301815291815281516020928301206000818152600390935291205490915060ff16156102f25760405162461bcd60e51b815260040161023090610ef6565b6000818152600360205260409020805460ff191660011790556103206001600160a01b03871633308a6106b6565b604082015161033a906001600160a01b0388169089610741565b60006001600160a01b031682602001516001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ab9190610f06565b6001600160a01b03161461042a5781604001516001600160a01b031663edbdf5e283602001518a8a8d6040518563ffffffff1660e01b81526004016103f39493929190610f46565b600060405180830381600087803b15801561040d57600080fd5b505af1158015610421573d6000803e3d6000fd5b50505050610497565b81604001516001600160a01b031663241dc2df83602001518a8a8d6040518563ffffffff1660e01b81526004016104649493929190610f46565b600060405180830381600087803b15801561047e57600080fd5b505af1158015610492573d6000803e3d6000fd5b505050505b60408201516104b2906001600160a01b038816906000610741565b806040516020016104c39190610f84565b604051602081830303815290604052925050509695505050505050565b6104e861062f565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556040517f50d0cbf2750e0276715bec254c588e057e0b05e87927eab7ebbad47fe1e88b4b90610540908390610c69565b60405180910390a150565b61055361062f565b6001600160a01b0381166105795760405162461bcd60e51b815260040161023090610ff6565b61058281610659565b50565b61058d61062f565b6001600160a01b03821660009081526002602052604090205460ff16811515811515036105cc5760405162461bcd60e51b815260040161023090611020565b6001600160a01b03831660009081526002602052604090819020805460ff1916841515179055517f19df4f9d38a9b103263e051a2824d8cd9cd6dc4205d136abbd3932a9eeede061906106229085908590611030565b60405180910390a1505050565b6000546001600160a01b031633146102015760405162461bcd60e51b81526004016102309061107d565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61073b846323b872dd60e01b8585856040516024016106d79392919061108d565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526107fa565b50505050565b8015806107ba5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e9061077790309086906004016110b5565b602060405180830381865afa158015610794573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b891906110db565b155b6107d65760405162461bcd60e51b815260040161023090611156565b6107f58363095ea7b360e01b84846040516024016106d7929190611166565b505050565b600061084f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108899092919063ffffffff16565b8051909150156107f5578080602001905181019061086d919061118c565b6107f55760405162461bcd60e51b815260040161023090611207565b606061089884846000856108a2565b90505b9392505050565b6060824710156108c45760405162461bcd60e51b815260040161023090611271565b6001600160a01b0385163b6108eb5760405162461bcd60e51b8152600401610230906112b5565b600080866001600160a01b0316858760405161090791906112e7565b60006040518083038185875af1925050503d8060008114610944576040519150601f19603f3d011682016040523d82523d6000602084013e610949565b606091505b5091509150610959828286610966565b925050505b949350505050565b6060831561097557508161089b565b8251156109855782518084602001fd5b8160405162461bcd60e51b81526004016102309190610c4f565b805b811461058257600080fd5b80356109b78161099f565b92915050565b6000602082840312156109d2576109d2600080fd5b600061095e84846109ac565b8015155b82525050565b602081016109b782846109de565b67ffffffffffffffff81166109a1565b80356109b7816109f6565b60006001600160a01b0382166109b7565b6109a181610a11565b80356109b781610a22565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610a7257610a72610a36565b6040525050565b6000610a8460405190565b9050610a908282610a4c565b919050565b600067ffffffffffffffff821115610aaf57610aaf610a36565b601f19601f83011660200192915050565b82818337506000910152565b6000610adf610ada84610a95565b610a79565b905082815260208101848484011115610afa57610afa600080fd5b610b05848285610ac0565b509392505050565b600082601f830112610b2157610b21600080fd5b813561095e848260208601610acc565b60008060008060008060c08789031215610b4d57610b4d600080fd5b6000610b598989610a06565b9650506020610b6a89828a01610a2b565b9550506040610b7b89828a016109ac565b9450506060610b8c89828a01610a2b565b935050608087013567ffffffffffffffff811115610bac57610bac600080fd5b610bb889828a01610b0d565b92505060a087013567ffffffffffffffff811115610bd857610bd8600080fd5b610be489828a01610b0d565b9150509295509295509295565b60005b83811015610c0c578181015183820152602001610bf4565b8381111561073b5750506000910152565b6000610c27825190565b808452602084019350610c3e818560208601610bf1565b601f01601f19169290920192915050565b6020808252810161089b8184610c1d565b6109e281610a11565b602081016109b78284610c60565b600060208284031215610c8c57610c8c600080fd5b600061095e8484610a2b565b8015156109a1565b80356109b781610c98565b60008060408385031215610cc157610cc1600080fd5b6000610ccd8585610a2b565b9250506020610cde85828601610ca0565b9150509250929050565b601b81526000602082017f63616c6c6572206973206e6f74206d61696e20636f6e74726163740000000000815291505b5060200190565b602080825281016109b781610ce8565b80516109b7816109f6565b80516109b781610a22565b600060608284031215610d5a57610d5a600080fd5b610d646060610a79565b90506000610d728484610d2f565b8252506020610d8384848301610d3a565b6020830152506040610d9784828501610d3a565b60408301525092915050565b600060608284031215610db857610db8600080fd5b600061095e8484610d45565b600e81526000602082017f696c6c6567616c20726f7574657200000000000000000000000000000000000081529150610d18565b602080825281016109b781610dc4565b60006109b78260601b90565b60006109b782610e08565b6109e2610e2b82610a11565b610e14565b806109e2565b90565b60006109b78260c01b90565b6109e267ffffffffffffffff8216610e39565b6000610e648289610e1f565b601482019150610e748288610e1f565b601482019150610e848287610e30565b602082019150610e948286610e45565b600882019150610ea48285610e45565b600882019150610eb48284610e45565b506008019695505050505050565b600f81526000602082017f7472616e7366657220657869737473000000000000000000000000000000000081529150610d18565b602080825281016109b781610ec2565b600060208284031215610f1b57610f1b600080fd5b600061095e8484610d3a565b60006109b7610e3667ffffffffffffffff841681565b6109e281610f27565b60808101610f548287610c60565b610f616020830186610c60565b610f6e6040830185610e30565b610f7b6060830184610f3d565b95945050505050565b6000610f908284610e30565b50602001919050565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015291505b5060400190565b602080825281016109b781610f99565b600381526000602082016206e6f760ec1b81529150610d18565b602080825281016109b781611006565b6040810161103e8285610c60565b61089b60208301846109de565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000610d18565b602080825281016109b78161104b565b6060810161109b8286610c60565b6110a86020830185610c60565b61095e6040830184610e30565b604081016110c38285610c60565b61089b6020830184610c60565b80516109b78161099f565b6000602082840312156110f0576110f0600080fd5b600061095e84846110d0565b603681526000602082017f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f81527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060208201529150610fef565b602080825281016109b7816110fc565b604081016111748285610c60565b61089b6020830184610e30565b80516109b781610c98565b6000602082840312156111a1576111a1600080fd5b600061095e8484611181565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f7420737563636565640000000000000000000000000000000000000000000060208201529150610fef565b602080825281016109b7816111ad565b602681526000602082017f416464726573733a20696e73756666696369656e742062616c616e636520666f81527f722063616c6c000000000000000000000000000000000000000000000000000060208201529150610fef565b602080825281016109b781611217565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150610d18565b602080825281016109b781611281565b60006112cf825190565b6112dd818560208601610bf1565b9290920192915050565b600061089b82846112c556fea2646970667358221220330948618bf084b5ce1c8f84e8580dde108c0504de34263828428183d1350a2b64736f6c634300080f0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/bridges/AnyswapAdapter.sol:AnyswapAdapter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5131,
        "contract": "contracts/bridges/AnyswapAdapter.sol:AnyswapAdapter",
        "label": "mainContract",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5135,
        "contract": "contracts/bridges/AnyswapAdapter.sol:AnyswapAdapter",
        "label": "supportedRouters",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5139,
        "contract": "contracts/bridges/AnyswapAdapter.sol:AnyswapAdapter",
        "label": "transfers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}