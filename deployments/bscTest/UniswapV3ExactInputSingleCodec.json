{
  "address": "0xd496123AFf800c6431dE9e975D1db1BD961C0606",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "dex",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICodec.SwapDescription",
          "name": "_swap",
          "type": "tuple"
        }
      ],
      "name": "decodeCalldata",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amountInOverride",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiverOverride",
          "type": "address"
        }
      ],
      "name": "encodeCalldataWithOverride",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "swapCalldata",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x09071487e08170ac58aa311b72323b806762c0dff892c473dbd448a7beaf3f02",
  "receipt": {
    "to": null,
    "from": "0x9532f934EfcE6c4Bf5BA078b25fDd81a780FBdfB",
    "contractAddress": "0xd496123AFf800c6431dE9e975D1db1BD961C0606",
    "transactionIndex": 17,
    "gasUsed": "398015",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x5a01205bb06bda202ca8e8067832004afa2193f01f0c600e2fccdc533585a068",
    "transactionHash": "0x09071487e08170ac58aa311b72323b806762c0dff892c473dbd448a7beaf3f02",
    "logs": [],
    "blockNumber": 17757819,
    "cumulativeGasUsed": "4358454",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "637f1c562d57d4a11ae1f42e31a08956",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"dex\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICodec.SwapDescription\",\"name\":\"_swap\",\"type\":\"tuple\"}],\"name\":\"decodeCalldata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amountInOverride\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiverOverride\",\"type\":\"address\"}],\"name\":\"encodeCalldataWithOverride\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"swapCalldata\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/codecs/UniswapV3ExactInputSingleCodec.sol\":\"UniswapV3ExactInputSingleCodec\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":400},\"remappings\":[]},\"sources\":{\"contracts/codecs/UniswapV3ExactInputSingleCodec.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.12;\\n\\nimport \\\"../interfaces/ICodec.sol\\\";\\nimport \\\"../interfaces/ISwapRouter.sol\\\";\\n\\ncontract UniswapV3ExactInputSingleCodec is ICodec {\\n    function decodeCalldata(ICodec.SwapDescription calldata _swap)\\n        external\\n        pure\\n        returns (\\n            uint256 amountIn,\\n            address tokenIn,\\n            address tokenOut\\n        )\\n    {\\n        ISwapRouter.ExactInputSingleParams memory data = abi.decode(\\n            (_swap.data[4:]),\\n            (ISwapRouter.ExactInputSingleParams)\\n        );\\n        return (data.amountIn, data.tokenIn, data.tokenOut);\\n    }\\n\\n    function encodeCalldataWithOverride(\\n        bytes calldata _data,\\n        uint256 _amountInOverride,\\n        address _receiverOverride\\n    ) external pure returns (bytes memory swapCalldata) {\\n        bytes4 selector = bytes4(_data);\\n        ISwapRouter.ExactInputParams memory data = abi.decode((_data[4:]), (ISwapRouter.ExactInputParams));\\n        data.amountIn = _amountInOverride;\\n        data.recipient = _receiverOverride;\\n        return abi.encodeWithSelector(selector, data);\\n    }\\n}\\n\",\"keccak256\":\"0x851e11b63f5a96c02a4a389aebc64fcd241db2d7046fce14d9ea403b8187825b\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/ICodec.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface ICodec {\\n    struct SwapDescription {\\n        address dex; // the DEX to use for the swap, zero address implies no swap needed\\n        bytes data; // the data to call the dex with\\n    }\\n\\n    function decodeCalldata(SwapDescription calldata swap)\\n        external\\n        view\\n        returns (\\n            uint256 amountIn,\\n            address tokenIn,\\n            address tokenOut\\n        );\\n\\n    function encodeCalldataWithOverride(\\n        bytes calldata data,\\n        uint256 amountInOverride,\\n        address receiverOverride\\n    ) external pure returns (bytes memory swapCalldata);\\n}\\n\",\"keccak256\":\"0x3c063f0ffd87df3df38998c78273bc00ac835331905be997c7e3c6aa3bdbdcc4\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.12;\\npragma abicoder v2;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x0b1a3f3f9bf426c002f27a286f8304df32c3e0a81ca0998e635a2da4a6f4e538\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061063d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063358f0e1c1461003b5780634c6da26914610078575b600080fd5b61004e61004936600461018a565b610098565b604080519384526001600160a01b0392831660208501529116908201526060015b60405180910390f35b61008b6100863660046101f4565b6100df565b60405161006f91906102cc565b60008080806100aa60208601866102df565b6100b891600490829061032d565b8101906100c591906103da565b60a081015181516020909201519097919650945092505050565b606060006100ed858761048f565b905060006100fe866004818a61032d565b81019061010b91906104bf565b606081018690526001600160a01b038516602082015260405190915082906101379083906024016105ae565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199093169290921790915292505050949350505050565b60006020828403121561019c57600080fd5b813567ffffffffffffffff8111156101b357600080fd5b8201604081850312156101c557600080fd5b9392505050565b6001600160a01b03811681146101e157600080fd5b50565b80356101ef816101cc565b919050565b6000806000806060858703121561020a57600080fd5b843567ffffffffffffffff8082111561022257600080fd5b818701915087601f83011261023657600080fd5b81358181111561024557600080fd5b88602082850101111561025757600080fd5b6020928301965094505085013591506040850135610274816101cc565b939692955090935050565b6000815180845260005b818110156102a557602081850181015186830182015201610289565b818111156102b7576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006101c5602083018461027f565b6000808335601e198436030181126102f657600080fd5b83018035915067ffffffffffffffff82111561031157600080fd5b60200191503681900382131561032657600080fd5b9250929050565b6000808585111561033d57600080fd5b8386111561034a57600080fd5b5050820193919092039150565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff8111828210171561039057610390610357565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156103bf576103bf610357565b604052919050565b803562ffffff811681146101ef57600080fd5b60006101008083850312156103ee57600080fd5b6040519081019067ffffffffffffffff8211818310171561041157610411610357565b8160405283359150610422826101cc565b818152610431602085016101e4565b6020820152610442604085016103c7565b6040820152610453606085016101e4565b60608201526080840135608082015260a084013560a082015260c084013560c082015261048260e085016101e4565b60e0820152949350505050565b6001600160e01b031981358181169160048510156104b75780818660040360031b1b83161692505b505092915050565b600060208083850312156104d257600080fd5b823567ffffffffffffffff808211156104ea57600080fd5b9084019060a082870312156104fe57600080fd5b61050661036d565b82358281111561051557600080fd5b8301601f8101881361052657600080fd5b80358381111561053857610538610357565b61054a601f8201601f19168701610396565b9350808452888682840101111561056057600080fd5b808683018786013760009084018601525081815261057f8385016101e4565b848201526040830135604082015260608301356060820152608083013560808201528094505050505092915050565b602081526000825160a060208401526105ca60c084018261027f565b90506001600160a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a0840152809150509291505056fea2646970667358221220237474d3096c0d990503fddebd5656b9f74662f2dc9ffcafc6957053a63fa98864736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063358f0e1c1461003b5780634c6da26914610078575b600080fd5b61004e61004936600461018a565b610098565b604080519384526001600160a01b0392831660208501529116908201526060015b60405180910390f35b61008b6100863660046101f4565b6100df565b60405161006f91906102cc565b60008080806100aa60208601866102df565b6100b891600490829061032d565b8101906100c591906103da565b60a081015181516020909201519097919650945092505050565b606060006100ed858761048f565b905060006100fe866004818a61032d565b81019061010b91906104bf565b606081018690526001600160a01b038516602082015260405190915082906101379083906024016105ae565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199093169290921790915292505050949350505050565b60006020828403121561019c57600080fd5b813567ffffffffffffffff8111156101b357600080fd5b8201604081850312156101c557600080fd5b9392505050565b6001600160a01b03811681146101e157600080fd5b50565b80356101ef816101cc565b919050565b6000806000806060858703121561020a57600080fd5b843567ffffffffffffffff8082111561022257600080fd5b818701915087601f83011261023657600080fd5b81358181111561024557600080fd5b88602082850101111561025757600080fd5b6020928301965094505085013591506040850135610274816101cc565b939692955090935050565b6000815180845260005b818110156102a557602081850181015186830182015201610289565b818111156102b7576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006101c5602083018461027f565b6000808335601e198436030181126102f657600080fd5b83018035915067ffffffffffffffff82111561031157600080fd5b60200191503681900382131561032657600080fd5b9250929050565b6000808585111561033d57600080fd5b8386111561034a57600080fd5b5050820193919092039150565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff8111828210171561039057610390610357565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156103bf576103bf610357565b604052919050565b803562ffffff811681146101ef57600080fd5b60006101008083850312156103ee57600080fd5b6040519081019067ffffffffffffffff8211818310171561041157610411610357565b8160405283359150610422826101cc565b818152610431602085016101e4565b6020820152610442604085016103c7565b6040820152610453606085016101e4565b60608201526080840135608082015260a084013560a082015260c084013560c082015261048260e085016101e4565b60e0820152949350505050565b6001600160e01b031981358181169160048510156104b75780818660040360031b1b83161692505b505092915050565b600060208083850312156104d257600080fd5b823567ffffffffffffffff808211156104ea57600080fd5b9084019060a082870312156104fe57600080fd5b61050661036d565b82358281111561051557600080fd5b8301601f8101881361052657600080fd5b80358381111561053857610538610357565b61054a601f8201601f19168701610396565b9350808452888682840101111561056057600080fd5b808683018786013760009084018601525081815261057f8385016101e4565b848201526040830135604082015260608301356060820152608083013560808201528094505050505092915050565b602081526000825160a060208401526105ca60c084018261027f565b90506001600160a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a0840152809150509291505056fea2646970667358221220237474d3096c0d990503fddebd5656b9f74662f2dc9ffcafc6957053a63fa98864736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}