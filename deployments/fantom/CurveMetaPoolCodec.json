{
  "address": "0x4a97B63b27576d774b6BD288Fa6aAe24F086B84c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "address[][]",
          "name": "_poolTokens",
          "type": "address[][]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[][]",
          "name": "poolTokens",
          "type": "address[][]"
        }
      ],
      "name": "PoolTokensSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "dex",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICodec.SwapDescription",
          "name": "_swap",
          "type": "tuple"
        }
      ],
      "name": "decodeCalldata",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amountInOverride",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiverOverride",
          "type": "address"
        }
      ],
      "name": "encodeCalldataWithOverride",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "swapCalldata",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pool2tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "address[][]",
          "name": "_poolTokens",
          "type": "address[][]"
        }
      ],
      "name": "setPoolTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e80683b06d5a7b022db3920fedf546407a8552cea1915b13ebfb5af0d7e5f44",
  "receipt": {
    "to": null,
    "from": "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "contractAddress": "0x4a97B63b27576d774b6BD288Fa6aAe24F086B84c",
    "transactionIndex": 0,
    "gasUsed": "1380099",
    "logsBloom": "0x
    "blockHash": "0x00018a2d00000f3aaa0099423a725f0373855eb241a531168a469b3f8bdeca0c",
    "transactionHash": "0x1e80683b06d5a7b022db3920fedf546407a8552cea1915b13ebfb5af0d7e5f44",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 35538591,
        "transactionHash": "0x1e80683b06d5a7b022db3920fedf546407a8552cea1915b13ebfb5af0d7e5f44",
        "address": "0x4a97B63b27576d774b6BD288Fa6aAe24F086B84c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x00018a2d00000f3aaa0099423a725f0373855eb241a531168a469b3f8bdeca0c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 35538591,
        "transactionHash": "0x1e80683b06d5a7b022db3920fedf546407a8552cea1915b13ebfb5af0d7e5f44",
        "address": "0x4a97B63b27576d774b6BD288Fa6aAe24F086B84c",
        "topics": [
          "0x38a931c26f20e9b16579a20bed4b3da2a2c983babd8b2988381a242462e9d42e"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000500000000000000000000000027e611fd27b276acbd5ffd632e5eaebec9761e400000000000000000000000002dd7c9371965472e5a5fd28fbe165007c61439e1000000000000000000000000a58f16498c288c357e28ee899873ff2b55d7c4370000000000000000000000007c79acc9aef46e4d55bd05d06c24e79c351832410000000000000000000000007a656b342e14f745e2b164890e88017e27ae7320000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000020000000000000000000000008d11ec38a3eb5e956b052f67da8bdc9bef8abf3e00000000000000000000000004068da6c83afcfa0e13ba15a6696662335d5b75000000000000000000000000000000000000000000000000000000000000000300000000000000000000000082f0b8b456c1a451378467398982d4834b6829c1000000000000000000000000049d68029688eabf473097a2fc38ef61633a3c7a00000000000000000000000004068da6c83afcfa0e13ba15a6696662335d5b750000000000000000000000000000000000000000000000000000000000000003000000000000000000000000fb98b335551a418cd0737375a2ea0ded62ea213b000000000000000000000000049d68029688eabf473097a2fc38ef61633a3c7a00000000000000000000000004068da6c83afcfa0e13ba15a6696662335d5b750000000000000000000000000000000000000000000000000000000000000003000000000000000000000000846e4d51d7e2043c1a87e0ab7490b93fb940357b00000000000000000000000004068da6c83afcfa0e13ba15a6696662335d5b75000000000000000000000000049d68029688eabf473097a2fc38ef61633a3c7a0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000dc301622e621166bd8e82f2ca0a26c13ad0be3550000000000000000000000008d11ec38a3eb5e956b052f67da8bdc9bef8abf3e00000000000000000000000004068da6c83afcfa0e13ba15a6696662335d5b75",
        "logIndex": 1,
        "blockHash": "0x00018a2d00000f3aaa0099423a725f0373855eb241a531168a469b3f8bdeca0c"
      }
    ],
    "blockNumber": 35538591,
    "cumulativeGasUsed": "1380099",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x27E611FD27b276ACbd5Ffd632E5eAEBEC9761E40",
      "0x2dd7C9371965472E5A5fD28fbE165007c61439E1",
      "0xA58F16498c288c357e28EE899873fF2b55D7C437",
      "0x7c79acC9aEf46E4d55BD05d06C24E79C35183241",
      "0x7a656B342E14F745e2B164890E88017e27AE7320"
    ],
    [
      [
        "0x8d11ec38a3eb5e956b052f67da8bdc9bef8abf3e",
        "0x04068da6c83afcfa0e13ba15a6696662335d5b75"
      ],
      [
        "0x82f0B8B456c1A451378467398982d4834b6829c1",
        "0x049d68029688eAbF473097a2fC38ef61633A3C7A",
        "0x04068DA6C83AFCFA0e13ba15A6696662335D5B75"
      ],
      [
        "0xfB98B335551a418cD0737375a2ea0ded62Ea213b",
        "0x049d68029688eAbF473097a2fC38ef61633A3C7A",
        "0x04068DA6C83AFCFA0e13ba15A6696662335D5B75"
      ],
      [
        "0x846e4D51d7E2043C1a87E0Ab7490B93FB940357b",
        "0x04068DA6C83AFCFA0e13ba15A6696662335D5B75",
        "0x049d68029688eAbF473097a2fC38ef61633A3C7A"
      ],
      [
        "0xdc301622e621166BD8E82f2cA0A26c13Ad0BE355",
        "0x8d11ec38a3eb5e956b052f67da8bdc9bef8abf3e",
        "0x04068da6c83afcfa0e13ba15a6696662335d5b75"
      ]
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "d504255bc6c7bb6a4d7997c9443f7478",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_poolTokens\",\"type\":\"address[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[][]\",\"name\":\"poolTokens\",\"type\":\"address[][]\"}],\"name\":\"PoolTokensSet\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"dex\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICodec.SwapDescription\",\"name\":\"_swap\",\"type\":\"tuple\"}],\"name\":\"decodeCalldata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amountInOverride\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiverOverride\",\"type\":\"address\"}],\"name\":\"encodeCalldataWithOverride\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"swapCalldata\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool2tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_poolTokens\",\"type\":\"address[][]\"}],\"name\":\"setPoolTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/codecs/CurveMetaPoolCodec.sol\":\"CurveMetaPoolCodec\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/codecs/CurveMetaPoolCodec.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Router01.sol\\\";\\nimport \\\"../interfaces/ICodec.sol\\\";\\nimport \\\"../interfaces/ICurvePool.sol\\\";\\n\\ncontract CurveMetaPoolCodec is ICodec, Ownable {\\n    struct SwapCalldata {\\n        int128 i;\\n        int128 j;\\n        uint256 dx;\\n        uint256 min_dy;\\n        address _receiver;\\n    }\\n\\n    event PoolTokensSet(address[] pools, address[][] poolTokens);\\n\\n    // Pool address to *underlying* token addresses. position sensitive.\\n    // This is needed because some of the metapools fail to implement curve's underlying_coins() spec,\\n    // therefore no consistant way to query token addresses by their indices.\\n    mapping(address => address[]) public pool2tokens;\\n\\n    constructor(address[] memory _pools, address[][] memory _poolTokens) {\\n        _setPoolTokens(_pools, _poolTokens);\\n    }\\n\\n    function setPoolTokens(address[] calldata _pools, address[][] calldata _poolTokens) external onlyOwner {\\n        _setPoolTokens(_pools, _poolTokens);\\n    }\\n\\n    function _setPoolTokens(address[] memory _pools, address[][] memory _poolTokens) private {\\n        require(_pools.length == _poolTokens.length, \\\"len mm\\\");\\n        for (uint256 i = 0; i < _pools.length; i++) {\\n            pool2tokens[_pools[i]] = _poolTokens[i];\\n        }\\n        emit PoolTokensSet(_pools, _poolTokens);\\n    }\\n\\n    function decodeCalldata(ICodec.SwapDescription calldata _swap)\\n        external\\n        view\\n        returns (\\n            uint256 amountIn,\\n            address tokenIn,\\n            address tokenOut\\n        )\\n    {\\n        SwapCalldata memory data = abi.decode((_swap.data[4:]), (SwapCalldata));\\n        amountIn = data.dx;\\n        uint256 i = uint256(int256(data.i));\\n        uint256 j = uint256(int256(data.j));\\n        address[] memory tokens = pool2tokens[_swap.dex];\\n        tokenIn = tokens[i];\\n        tokenOut = tokens[j];\\n    }\\n\\n    function encodeCalldataWithOverride(\\n        bytes calldata _data,\\n        uint256 _amountInOverride,\\n        address _receiverOverride\\n    ) external pure returns (bytes memory swapCalldata) {\\n        bytes4 selector = bytes4(_data);\\n        SwapCalldata memory data = abi.decode((_data[4:]), (SwapCalldata));\\n        data.dx = _amountInOverride;\\n        data._receiver = _receiverOverride;\\n        return abi.encodeWithSelector(selector, data);\\n    }\\n}\\n\",\"keccak256\":\"0xff8159d99954f30a29c185cd3fbdbfef383e231e7da71874689885db58cb8686\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/ICodec.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface ICodec {\\n    struct SwapDescription {\\n        address dex; // the DEX to use for the swap, zero address implies no swap needed\\n        bytes data; // the data to call the dex with\\n    }\\n\\n    function decodeCalldata(SwapDescription calldata swap)\\n        external\\n        view\\n        returns (\\n            uint256 amountIn,\\n            address tokenIn,\\n            address tokenOut\\n        );\\n\\n    function encodeCalldataWithOverride(\\n        bytes calldata data,\\n        uint256 amountInOverride,\\n        address receiverOverride\\n    ) external pure returns (bytes memory swapCalldata);\\n}\\n\",\"keccak256\":\"0x3c063f0ffd87df3df38998c78273bc00ac835331905be997c7e3c6aa3bdbdcc4\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.12;\\n\\ninterface ICurvePool {\\n    function coins(uint256 i) external view returns (address);\\n\\n    // specifically for CurveNonStandardMetaPoolCodec, the uint128  not used in other codecs\\n    function underlying_coins(uint128 i) external view returns (address);\\n\\n    // plain & meta pool\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    // meta pool\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    // plain & meta pool\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    // meta pool\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    // special function signature that is only used by the sUSD pool on Ethereum 0xA5407eAE9Ba41422680e2e00537571bcC53efBfD\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb6ff4e4cda8bd98deb32cb9c7e54cd29ffe252e7137e93a177a5769e76015f57\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.12;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x87420cf46ee75694fdd1f98a82f756390b8489c519f29bceda30fa4163b9e6fe\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620015d8380380620015d8833981016040819052620000349162000425565b6200003f3362000053565b6200004b8282620000a3565b505062000670565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051825114620000d05760405162461bcd60e51b8152600401620000c7906200049f565b60405180910390fd5b60005b82518110156200016657818181518110620000f257620000f2620004c4565b602002602001015160016000858481518110620001135762000113620004c4565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020908051906020019062000150929190620001a6565b50806200015d81620004f0565b915050620000d3565b507f38a931c26f20e9b16579a20bed4b3da2a2c983babd8b2988381a242462e9d42e82826040516200019a92919062000647565b60405180910390a15050565b828054828255906000526020600020908101928215620001fe579160200282015b82811115620001fe57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620001c7565b506200020c92915062000210565b5090565b5b808211156200020c576000815560010162000211565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b038211171562000265576200026562000227565b6040525050565b60006200027860405190565b90506200028682826200023d565b919050565b60006001600160401b03821115620002a757620002a762000227565b5060209081020190565b60006001600160a01b0382165b92915050565b620002cf81620002b1565b8114620002db57600080fd5b50565b8051620002be81620002c4565b600062000302620002fc846200028b565b6200026c565b83815290506020808201908402830185811115620003235762000323600080fd5b835b818110156200034b57806200033b8882620002de565b8452506020928301920162000325565b5050509392505050565b600082601f8301126200036b576200036b600080fd5b81516200037d848260208601620002eb565b949350505050565b600062000396620002fc846200028b565b83815290506020808201908402830185811115620003b757620003b7600080fd5b835b818110156200034b5780516001600160401b03811115620003dd57620003dd600080fd5b808601620003ec898262000355565b8552505060209283019201620003b9565b600082601f830112620004135762000413600080fd5b81516200037d84826020860162000385565b600080604083850312156200043d576200043d600080fd5b82516001600160401b03811115620004585762000458600080fd5b620004668582860162000355565b92505060208301516001600160401b03811115620004875762000487600080fd5b6200049585828601620003fd565b9150509250929050565b60208082528101620002be8160068152656c656e206d6d60d01b602082015260400190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415620005075762000507620004da565b5060010190565b6200051981620002b1565b82525050565b60006200052d83836200050e565b505060200190565b600062000540825190565b80845260209384019383018060005b83811015620005785781516200056688826200051f565b9750602083019250506001016200054f565b509495945050505050565b60006200058e825190565b80845260209384019383018060005b8381101562000578578151620005b488826200051f565b9750602083019250506001016200059d565b6000620005d4838362000583565b9392505050565b6000620005e6825190565b80845260208401935083602082028501620006018560200190565b8060005b858110156200063a5784840389528151620006218582620005c6565b94506020830160209a909a019992505060010162000605565b5091979650505050505050565b604080825281016200065a818562000535565b905081810360208301526200037d8184620005db565b610f5880620006806000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806376d538ec1161005b57806376d538ec146100d75780638da5cb5b146100f7578063f2fde38b14610108578063ffe3fd301461011b57600080fd5b8063358f0e1c146100825780634c6da269146100ad578063715018a6146100cd575b600080fd5b610095610090366004610628565b61012e565b6040516100a493929190610687565b60405180910390f35b6100c06100bb36600461072d565b61024a565b6040516100a491906107fa565b6100d56102f5565b005b6100ea6100e5366004610812565b610334565b6040516100a4919061084f565b6000546001600160a01b03166100ea565b6100d561011636600461085d565b61036c565b6100d56101293660046108c9565b6103c8565b60008080806101406020860186610942565b61014e9160049082906109a1565b81019061015b9190610acb565b60408101518151602080840151929750929350600f90810b9291900b90600090600190829061018c908b018b61085d565b6001600160a01b03166001600160a01b0316815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561020057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101e2575b5050505050905080838151811061021957610219610aec565b6020026020010151955080828151811061023557610235610aec565b60200260200101519450505050509193909250565b606060006102588587610b02565b90506000610269866004818a6109a1565b8101906102769190610acb565b60408082018790526001600160a01b03861660808301525190915082906102a1908390602401610ba4565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152925050505b949350505050565b6000546001600160a01b031633146103285760405162461bcd60e51b815260040161031f90610be7565b60405180910390fd5b6103326000610440565b565b6001602052816000526040600020818154811061035057600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000546001600160a01b031633146103965760405162461bcd60e51b815260040161031f90610be7565b6001600160a01b0381166103bc5760405162461bcd60e51b815260040161031f90610bf7565b6103c581610440565b50565b6000546001600160a01b031633146103f25760405162461bcd60e51b815260040161031f90610be7565b61043a8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506104359250859150869050610d6e565b61049d565b50505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80518251146104be5760405162461bcd60e51b815260040161031f90610daf565b60005b8251811015610548578181815181106104dc576104dc610aec565b6020026020010151600160008584815181106104fa576104fa610aec565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000209080519060200190610535929190610586565b508061054081610dd5565b9150506104c1565b507f38a931c26f20e9b16579a20bed4b3da2a2c983babd8b2988381a242462e9d42e828260405161057a929190610efd565b60405180910390a15050565b8280548282559060005260206000209081019282156105e8579160200282015b828111156105e8578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039091161782556020909201916001909101906105a6565b506105f49291506105f8565b5090565b5b808211156105f457600081556001016105f9565b60006040828403121561062257610622600080fd5b50919050565b60006020828403121561063d5761063d600080fd5b813567ffffffffffffffff81111561065757610657600080fd5b6102ed8482850161060d565b805b82525050565b60006001600160a01b0382165b92915050565b6106658161066b565b606081016106958286610663565b6106a2602083018561067e565b6102ed604083018461067e565b60008083601f8401126106c4576106c4600080fd5b50813567ffffffffffffffff8111156106df576106df600080fd5b6020830191508360018202830111156106fa576106fa600080fd5b9250929050565b805b81146103c557600080fd5b803561067881610701565b6107038161066b565b803561067881610719565b6000806000806060858703121561074657610746600080fd5b843567ffffffffffffffff81111561076057610760600080fd5b61076c878288016106af565b9450945050602061077f8782880161070e565b925050604061079087828801610722565b91505092959194509250565b60005b838110156107b757818101518382015260200161079f565b8381111561043a5750506000910152565b60006107d2825190565b8084526020840193506107e981856020860161079c565b601f01601f19169290920192915050565b6020808252810161080b81846107c8565b9392505050565b6000806040838503121561082857610828600080fd5b60006108348585610722565b92505060206108458582860161070e565b9150509250929050565b60208101610678828461067e565b60006020828403121561087257610872600080fd5b60006102ed8484610722565b60008083601f84011261089357610893600080fd5b50813567ffffffffffffffff8111156108ae576108ae600080fd5b6020830191508360208202830111156106fa576106fa600080fd5b600080600080604085870312156108e2576108e2600080fd5b843567ffffffffffffffff8111156108fc576108fc600080fd5b6109088782880161087e565b9450945050602085013567ffffffffffffffff81111561092a5761092a600080fd5b6109368782880161087e565b95989497509550505050565b6000808335601e193685900301811261095d5761095d600080fd5b80840192508235915067ffffffffffffffff82111561097e5761097e600080fd5b60208301925060018202360383131561099957610999600080fd5b509250929050565b600080858511156109b4576109b4600080fd5b838611156109c4576109c4600080fd5b5050820193919092039150565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610a0d57610a0d6109d1565b6040525050565b6000610a1f60405190565b9050610a2b82826109e7565b919050565b61070381600f0b90565b803561067881610a30565b600060a08284031215610a5a57610a5a600080fd5b610a6460a0610a14565b90506000610a728484610a3a565b8252506020610a8384848301610a3a565b6020830152506040610a978482850161070e565b6040830152506060610aab8482850161070e565b6060830152506080610abf84828501610722565b60808301525092915050565b600060a08284031215610ae057610ae0600080fd5b60006102ed8484610a45565b634e487b7160e01b600052603260045260246000fd5b80356001600160e01b03191682826004821015610b3557610b306001600160e01b0319836004036008021b90565b831692505b505092915050565b61066581600f0b90565b805160a0830190610b588482610b3d565b506020820151610b6b6020850182610b3d565b506040820151610b7e6040850182610663565b506060820151610b916060850182610663565b50608082015161043a608085018261067e565b60a081016106788284610b47565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b6020808252810161067881610bb2565b6020808252810161067881602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201527f6464726573730000000000000000000000000000000000000000000000000000604082015260600190565b600067ffffffffffffffff821115610c7257610c726109d1565b5060209081020190565b6000610c8f610c8a84610c58565b610a14565b83815290506020808201908402830185811115610cae57610cae600080fd5b835b81811015610cd25780610cc38882610722565b84525060209283019201610cb0565b5050509392505050565b600082601f830112610cf057610cf0600080fd5b81356102ed848260208601610c7c565b6000610d0e610c8a84610c58565b83815290506020808201908402830185811115610d2d57610d2d600080fd5b835b81811015610cd257803567ffffffffffffffff811115610d5157610d51600080fd5b808601610d5e8982610cdc565b8552505060209283019201610d2f565b600061080b368484610d00565b600681526000602082017f6c656e206d6d000000000000000000000000000000000000000000000000000081529150610be0565b6020808252810161067881610d7b565b634e487b7160e01b600052601160045260246000fd5b6000600019821415610de957610de9610dbf565b5060010190565b6000610dfc838361067e565b505060200190565b6000610e0e825190565b80845260209384019383018060005b83811015610e42578151610e318882610df0565b975060208301925050600101610e1d565b509495945050505050565b6000610e57825190565b80845260209384019383018060005b83811015610e42578151610e7a8882610df0565b975060208301925050600101610e66565b600061080b8383610e4d565b6000610ea1825190565b80845260208401935083602082028501610ebb8560200190565b8060005b85811015610ef05784840389528151610ed88582610e8b565b94506020830160209a909a0199925050600101610ebf565b5091979650505050505050565b60408082528101610f0e8185610e04565b905081810360208301526102ed8184610e9756fea26469706673582212204eaabce7854238b3627cf1120d836a60a2fb181d6b07192742ab89a94cc99bd764736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806376d538ec1161005b57806376d538ec146100d75780638da5cb5b146100f7578063f2fde38b14610108578063ffe3fd301461011b57600080fd5b8063358f0e1c146100825780634c6da269146100ad578063715018a6146100cd575b600080fd5b610095610090366004610628565b61012e565b6040516100a493929190610687565b60405180910390f35b6100c06100bb36600461072d565b61024a565b6040516100a491906107fa565b6100d56102f5565b005b6100ea6100e5366004610812565b610334565b6040516100a4919061084f565b6000546001600160a01b03166100ea565b6100d561011636600461085d565b61036c565b6100d56101293660046108c9565b6103c8565b60008080806101406020860186610942565b61014e9160049082906109a1565b81019061015b9190610acb565b60408101518151602080840151929750929350600f90810b9291900b90600090600190829061018c908b018b61085d565b6001600160a01b03166001600160a01b0316815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561020057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101e2575b5050505050905080838151811061021957610219610aec565b6020026020010151955080828151811061023557610235610aec565b60200260200101519450505050509193909250565b606060006102588587610b02565b90506000610269866004818a6109a1565b8101906102769190610acb565b60408082018790526001600160a01b03861660808301525190915082906102a1908390602401610ba4565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152925050505b949350505050565b6000546001600160a01b031633146103285760405162461bcd60e51b815260040161031f90610be7565b60405180910390fd5b6103326000610440565b565b6001602052816000526040600020818154811061035057600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000546001600160a01b031633146103965760405162461bcd60e51b815260040161031f90610be7565b6001600160a01b0381166103bc5760405162461bcd60e51b815260040161031f90610bf7565b6103c581610440565b50565b6000546001600160a01b031633146103f25760405162461bcd60e51b815260040161031f90610be7565b61043a8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506104359250859150869050610d6e565b61049d565b50505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80518251146104be5760405162461bcd60e51b815260040161031f90610daf565b60005b8251811015610548578181815181106104dc576104dc610aec565b6020026020010151600160008584815181106104fa576104fa610aec565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000209080519060200190610535929190610586565b508061054081610dd5565b9150506104c1565b507f38a931c26f20e9b16579a20bed4b3da2a2c983babd8b2988381a242462e9d42e828260405161057a929190610efd565b60405180910390a15050565b8280548282559060005260206000209081019282156105e8579160200282015b828111156105e8578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039091161782556020909201916001909101906105a6565b506105f49291506105f8565b5090565b5b808211156105f457600081556001016105f9565b60006040828403121561062257610622600080fd5b50919050565b60006020828403121561063d5761063d600080fd5b813567ffffffffffffffff81111561065757610657600080fd5b6102ed8482850161060d565b805b82525050565b60006001600160a01b0382165b92915050565b6106658161066b565b606081016106958286610663565b6106a2602083018561067e565b6102ed604083018461067e565b60008083601f8401126106c4576106c4600080fd5b50813567ffffffffffffffff8111156106df576106df600080fd5b6020830191508360018202830111156106fa576106fa600080fd5b9250929050565b805b81146103c557600080fd5b803561067881610701565b6107038161066b565b803561067881610719565b6000806000806060858703121561074657610746600080fd5b843567ffffffffffffffff81111561076057610760600080fd5b61076c878288016106af565b9450945050602061077f8782880161070e565b925050604061079087828801610722565b91505092959194509250565b60005b838110156107b757818101518382015260200161079f565b8381111561043a5750506000910152565b60006107d2825190565b8084526020840193506107e981856020860161079c565b601f01601f19169290920192915050565b6020808252810161080b81846107c8565b9392505050565b6000806040838503121561082857610828600080fd5b60006108348585610722565b92505060206108458582860161070e565b9150509250929050565b60208101610678828461067e565b60006020828403121561087257610872600080fd5b60006102ed8484610722565b60008083601f84011261089357610893600080fd5b50813567ffffffffffffffff8111156108ae576108ae600080fd5b6020830191508360208202830111156106fa576106fa600080fd5b600080600080604085870312156108e2576108e2600080fd5b843567ffffffffffffffff8111156108fc576108fc600080fd5b6109088782880161087e565b9450945050602085013567ffffffffffffffff81111561092a5761092a600080fd5b6109368782880161087e565b95989497509550505050565b6000808335601e193685900301811261095d5761095d600080fd5b80840192508235915067ffffffffffffffff82111561097e5761097e600080fd5b60208301925060018202360383131561099957610999600080fd5b509250929050565b600080858511156109b4576109b4600080fd5b838611156109c4576109c4600080fd5b5050820193919092039150565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610a0d57610a0d6109d1565b6040525050565b6000610a1f60405190565b9050610a2b82826109e7565b919050565b61070381600f0b90565b803561067881610a30565b600060a08284031215610a5a57610a5a600080fd5b610a6460a0610a14565b90506000610a728484610a3a565b8252506020610a8384848301610a3a565b6020830152506040610a978482850161070e565b6040830152506060610aab8482850161070e565b6060830152506080610abf84828501610722565b60808301525092915050565b600060a08284031215610ae057610ae0600080fd5b60006102ed8484610a45565b634e487b7160e01b600052603260045260246000fd5b80356001600160e01b03191682826004821015610b3557610b306001600160e01b0319836004036008021b90565b831692505b505092915050565b61066581600f0b90565b805160a0830190610b588482610b3d565b506020820151610b6b6020850182610b3d565b506040820151610b7e6040850182610663565b506060820151610b916060850182610663565b50608082015161043a608085018261067e565b60a081016106788284610b47565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b6020808252810161067881610bb2565b6020808252810161067881602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201527f6464726573730000000000000000000000000000000000000000000000000000604082015260600190565b600067ffffffffffffffff821115610c7257610c726109d1565b5060209081020190565b6000610c8f610c8a84610c58565b610a14565b83815290506020808201908402830185811115610cae57610cae600080fd5b835b81811015610cd25780610cc38882610722565b84525060209283019201610cb0565b5050509392505050565b600082601f830112610cf057610cf0600080fd5b81356102ed848260208601610c7c565b6000610d0e610c8a84610c58565b83815290506020808201908402830185811115610d2d57610d2d600080fd5b835b81811015610cd257803567ffffffffffffffff811115610d5157610d51600080fd5b808601610d5e8982610cdc565b8552505060209283019201610d2f565b600061080b368484610d00565b600681526000602082017f6c656e206d6d000000000000000000000000000000000000000000000000000081529150610be0565b6020808252810161067881610d7b565b634e487b7160e01b600052601160045260246000fd5b6000600019821415610de957610de9610dbf565b5060010190565b6000610dfc838361067e565b505060200190565b6000610e0e825190565b80845260209384019383018060005b83811015610e42578151610e318882610df0565b975060208301925050600101610e1d565b509495945050505050565b6000610e57825190565b80845260209384019383018060005b83811015610e42578151610e7a8882610df0565b975060208301925050600101610e66565b600061080b8383610e4d565b6000610ea1825190565b80845260208401935083602082028501610ebb8560200190565b8060005b85811015610ef05784840389528151610ed88582610e8b565b94506020830160209a909a0199925050600101610ebf565b5091979650505050505050565b60408082528101610f0e8185610e04565b905081810360208301526102ed8184610e9756fea26469706673582212204eaabce7854238b3627cf1120d836a60a2fb181d6b07192742ab89a94cc99bd764736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/codecs/CurveMetaPoolCodec.sol:CurveMetaPoolCodec",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4190,
        "contract": "contracts/codecs/CurveMetaPoolCodec.sol:CurveMetaPoolCodec",
        "label": "pool2tokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      }
    }
  }
}