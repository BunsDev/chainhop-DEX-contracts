{
  "address": "0xd1349E2C674AaB21A91569b3058D7A5edBed4382",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mainContract",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_routers",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "mainContract",
          "type": "address"
        }
      ],
      "name": "MainContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SupportedRouterUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_bridgeParams",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "bridgeResp",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mainContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "setSupportedRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportedRouters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "transfers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mainContract",
          "type": "address"
        }
      ],
      "name": "updateMainContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf1e8cae262190b1a6754da302cd12be2ed020252d96155dc9b40daff08d3d20e",
  "receipt": {
    "to": null,
    "from": "0x8b5F94a2c2e23eE8cC0Ff56872aF973243eF7628",
    "contractAddress": "0xd1349E2C674AaB21A91569b3058D7A5edBed4382",
    "transactionIndex": 4,
    "gasUsed": "1504583",
    "logsBloom": "0x
    "blockHash": "0x00024f2000000d66e128553916a62f7a6be67ced46b11cd6629ddb8058265650",
    "transactionHash": "0xf1e8cae262190b1a6754da302cd12be2ed020252d96155dc9b40daff08d3d20e",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 46517870,
        "transactionHash": "0xf1e8cae262190b1a6754da302cd12be2ed020252d96155dc9b40daff08d3d20e",
        "address": "0xd1349E2C674AaB21A91569b3058D7A5edBed4382",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b5f94a2c2e23ee8cc0ff56872af973243ef7628"
        ],
        "data": "0x",
        "logIndex": 68,
        "blockHash": "0x00024f2000000d66e128553916a62f7a6be67ced46b11cd6629ddb8058265650"
      }
    ],
    "blockNumber": 46517870,
    "cumulativeGasUsed": "3870004",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA83A1973d6D8e08e626b75FB4Bfbd248E1EE3eFF",
    [
      "0xAf5191B0De278C7286d6C7CC6ab6BB8A73bA2Cd6"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "26c8a0c2d6ce853e99ad16af4dec3f89",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mainContract\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_routers\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mainContract\",\"type\":\"address\"}],\"name\":\"MainContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SupportedRouterUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_bridgeParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"bridgeResp\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSupportedRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transfers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mainContract\",\"type\":\"address\"}],\"name\":\"updateMainContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridges/StargateAdapter.sol\":\"StargateAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/bridges/StargateAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../interfaces/IBridgeAdapter.sol\\\";\\nimport \\\"../interfaces/IBridgeStargate.sol\\\";\\nimport \\\"../interfaces/ITransferSwapper.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\ncontract StargateAdapter is IBridgeAdapter, Ownable {\\n    using SafeERC20 for IERC20;\\n    \\n    address public mainContract;\\n    mapping(address => bool) public supportedRouters;\\n    mapping(bytes32 => bool) public transfers;\\n\\n    event MainContractUpdated(address mainContract);\\n    event SupportedRouterUpdated(address router, bool enabled);\\n\\n    modifier onlyMainContract() {\\n        require(msg.sender == mainContract, \\\"caller is not main contract\\\");\\n        _;\\n    }\\n\\n    constructor(address _mainContract, address[] memory _routers) {\\n        mainContract = _mainContract;\\n        for (uint256 i = 0; i < _routers.length; i++) {\\n            require(_routers[i] != address(0), \\\"nop\\\");\\n            supportedRouters[_routers[i]] = true;\\n        }\\n    }\\n\\n    struct StargateParams {\\n        // a unique identifier that is uses to dedup transfers\\n        // this value is the a timestamp sent from frontend, but in theory can be any unique number\\n        uint64 nonce;\\n        uint256 srcPoolId;\\n        uint256 dstPoolId;\\n        uint256 minReceivedAmt; // defines the slippage, the min qty you would accept on the destination\\n        uint16 stargateDstChainId; // stargate defines chain id in its way\\n        address router; // the target router, should be in the <ref>supportedRouters</ref>\\n    }\\n\\n    function bridge(\\n        uint64 _dstChainId,\\n        address _receiver,\\n        uint256 _amount,\\n        address _token,\\n        bytes memory _bridgeParams,\\n        bytes memory //_requestMessage // Not used for now, as stargate messaging is not supported in this version\\n    ) external payable onlyMainContract returns (bytes memory bridgeResp) {\\n        StargateParams memory params = abi.decode((_bridgeParams), (StargateParams));\\n        require(supportedRouters[params.router], \\\"illegal router\\\");\\n        \\n        bytes32 transferId = keccak256(\\n            abi.encodePacked(_receiver, _token, _amount, _dstChainId, params.nonce, uint64(block.chainid))\\n        );\\n        require(transfers[transferId] == false, \\\"transfer exists\\\");\\n        transfers[transferId] = true;\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n        uint64 outboundNonce = swap(_token, _receiver, _amount, params);\\n        return abi.encodePacked(outboundNonce);\\n    }\\n\\n    function swap(\\n        address _token, \\n        address _receiver,\\n        uint256 _amount,\\n        StargateParams memory params) private returns (uint64 outboundNonce) {\\n        IBridgeStargate router = IBridgeStargate(params.router);\\n        ITransferSwapper main = ITransferSwapper(mainContract);\\n        if (_token == main.nativeWrap()) {\\n            IWETH(_token).withdraw(_amount);\\n            router.swapETH{value: msg.value + _amount}(\\n                params.stargateDstChainId, \\n                payable(mainContract),\\n                abi.encodePacked(_receiver), \\n                _amount, \\n                params.minReceivedAmt);\\n        } else {\\n            IERC20(_token).safeApprove(params.router, _amount);\\n            router.swap{value: msg.value}(\\n                params.stargateDstChainId, \\n                params.srcPoolId, \\n                params.dstPoolId, \\n                payable(mainContract), // default to refund to main contract\\n                _amount,\\n                params.minReceivedAmt, \\n                IBridgeStargate.lzTxObj(0, 0, \\\"0x\\\"), \\n                abi.encodePacked(_receiver), \\n                bytes(\\\"\\\") // not supported additional msg in this version\\n            );\\n            IERC20(_token).safeApprove(params.router, 0);\\n        }\\n\\n        // query current nonce\\n        address stargateInternalBridge;\\n        if (_token == main.nativeWrap()) {\\n            stargateInternalBridge = IBridgeStargate(router.stargateRouter()).bridge();\\n        } else {\\n            stargateInternalBridge = router.bridge();\\n        }\\n        address layerZeroEndpoint = IStargateInternalBridge(stargateInternalBridge).layerZeroEndpoint();\\n        outboundNonce = ILayerZeroEndpoint(layerZeroEndpoint).getOutboundNonce(params.stargateDstChainId, stargateInternalBridge);\\n    }\\n\\n    function updateMainContract(address _mainContract) external onlyOwner {\\n        mainContract = _mainContract;\\n        emit MainContractUpdated(_mainContract);\\n    }\\n\\n    function setSupportedRouter(address _router, bool _enabled) external onlyOwner {\\n        bool enabled = supportedRouters[_router];\\n        require(enabled != _enabled, \\\"nop\\\");\\n        supportedRouters[_router] = _enabled;\\n        emit SupportedRouterUpdated(_router, _enabled);\\n    }\\n\\n    // This is needed to receive ETH when calling `IWETH.withdraw`\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xfb451405f352520b128bb8ce73eafb090cd2892c6835366db42b2eeabc7c3a11\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IBridgeAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\ninterface IBridgeAdapter {\\n    function bridge(\\n        uint64 _dstChainId,\\n        // the address that the fund is transfered to on the destination chain\\n        address _receiver,\\n        uint256 _amount,\\n        address _token,\\n        // Bridge transfers quoted and abi encoded by chainhop backend server.\\n        // Bridge adapter implementations need to decode this themselves.\\n        bytes memory _bridgeParams,\\n        // The message to be bridged alongside the transfer.\\n        // Note if the bridge adapter doesn't support message passing, the call should revert when\\n        // this field is set.\\n        bytes memory _requestMessage\\n    ) external payable returns (bytes memory bridgeResp);\\n}\\n\",\"keccak256\":\"0x83846dd37f0913ef77647a711ff8b1c53cbd72f6a0fc51d88ef1ad62412ee045\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IBridgeStargate.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\ninterface IBridgeStargate {\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    // only in non RouterETH\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n    // only in non RouterETH\\n    function bridge() external pure returns (address);\\n\\n    // only in RouterETH\\n    function swapETH(\\n        uint16 _dstChainId,                         // destination Stargate chainId\\n        address payable _refundAddress,             // refund additional messageFee to this address\\n        bytes calldata _toAddress,                  // the receiver of the destination ETH\\n        uint256 _amountLD,                          // the amount, in Local Decimals, to be swapped\\n        uint256 _minAmountLD                        // the minimum amount accepted out on destination\\n    ) external payable;\\n    // only in RouterETH\\n    function stargateRouter() external pure returns (address);\\n}\\n\\ninterface IStargateInternalBridge {\\n    function layerZeroEndpoint() external pure returns (address);\\n}\\n\\ninterface ILayerZeroEndpoint {\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xdb51d6bb3e108bad7202af4befacc3c04a9fd51ace1c4f2e52c79d4bffbcf446\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IMessageReceiverApp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessageReceiverApp {\\n    enum ExecutionStatus {\\n        Fail, // execution failed, finalized\\n        Success, // execution succeeded, finalized\\n        Retry // execution rejected, can retry later\\n    }\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) if the process is originated from MessageBus (MessageBusSender)'s\\n     *         sendMessageWithTransfer it is only called when the tokens are checked to be arrived at this contract's address.\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransfer(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Only called by MessageBus (MessageBusReceiver) if\\n     *         1. executeMessageWithTransfer reverts, or\\n     *         2. executeMessageWithTransfer returns ExecutionStatus.Fail\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferFallback(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\\n     * @param _token The token address of the original transfer\\n     * @param _amount The amount of the original transfer\\n     * @param _message The same message associated with the original transfer\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver)\\n     * @param _sender The address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        address _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n}\\n\",\"keccak256\":\"0x9e4d6ec7303c40c1a8c897655c3d6ef6ae1f9fa7e8c806e7c6878ff01b51e67b\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/ITransferSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"./IMessageReceiverApp.sol\\\";\\n\\ninterface ITransferSwapper {\\n    function nativeWrap() external view returns (address);\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\\n     * @param _token The token address of the original transfer\\n     * @param _amount The amount of the original transfer\\n     * @param _message The same message associated with the original transfer\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferRefundFromAdapter(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (IMessageReceiverApp.ExecutionStatus);\\n}\\n\",\"keccak256\":\"0xc691ddef90e6af8c4a4f1a262f7ed95c5a4559a927f12cf9bd7052f77faa6789\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x4af2aca7cbf87734e6ae30d3027baaddba6351f46e1ddbd155887a07ec85c2c2\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001c7a38038062001c7a8339810160408190526200003491620002da565b6200003f336200012c565b600180546001600160a01b0319166001600160a01b03841617905560005b8151811015620001235760006001600160a01b031682828151811062000087576200008762000339565b60200260200101516001600160a01b031603620000c15760405162461bcd60e51b8152600401620000b8906200034f565b60405180910390fd5b600160026000848481518110620000dc57620000dc62000339565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806200011a8162000387565b9150506200005d565b505050620003a4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006001600160a01b0382165b92915050565b6200019a816200017c565b8114620001a657600080fd5b50565b805162000189816200018f565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715620001f457620001f4620001b6565b6040525050565b60006200020760405190565b9050620002158282620001cc565b919050565b60006001600160401b03821115620002365762000236620001b6565b5060209081020190565b60006200025762000251846200021a565b620001fb565b83815290506020808201908402830185811115620002785762000278600080fd5b835b81811015620002a05780620002908882620001a9565b845250602092830192016200027a565b5050509392505050565b600082601f830112620002c057620002c0600080fd5b8151620002d284826020860162000240565b949350505050565b60008060408385031215620002f257620002f2600080fd5b6000620003008585620001a9565b92505060208301516001600160401b03811115620003215762000321600080fd5b6200032f85828601620002aa565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b602080825281016200018981600381526206e6f760ec1b602082015260400190565b634e487b7160e01b600052601160045260246000fd5b600060001982036200039d576200039d62000371565b5060010190565b6118c680620003b46000396000f3fe60806040526004361061009a5760003560e01c80639879c48d11610069578063df8bbc591161004e578063df8bbc591461019a578063f2fde38b146101ba578063f8e9c5c0146101da57600080fd5b80639879c48d1461014a578063d270e7ab1461017a57600080fd5b80633c64f04b146100a6578063715018a6146100ec578063834bc3ea146101035780638da5cb5b1461012357600080fd5b366100a157005b600080fd5b3480156100b257600080fd5b506100d66100c1366004610db4565b60036020526000908152604090205460ff1681565b6040516100e39190610ddf565b60405180910390f35b3480156100f857600080fd5b506101016101fa565b005b610116610111366004610f28565b61020e565b6040516100e39190611046565b34801561012f57600080fd5b506000546001600160a01b03165b6040516100e39190611060565b34801561015657600080fd5b506100d661016536600461106e565b60026020526000908152604090205460ff1681565b34801561018657600080fd5b5060015461013d906001600160a01b031681565b3480156101a657600080fd5b506101016101b536600461106e565b61036d565b3480156101c657600080fd5b506101016101d536600461106e565b6103d8565b3480156101e657600080fd5b506101016101f53660046110a2565b610412565b6102026104bc565b61020c60006104e6565b565b6001546060906001600160a01b031633146102445760405162461bcd60e51b815260040161023b90611116565b60405180910390fd5b60008380602001905181019061025a91906111f6565b60a08101516001600160a01b031660009081526002602052604090205490915060ff166102995760405162461bcd60e51b815260040161023b9061124b565b80516040516000916102b7918a9189918b918e9146906020016112a8565b60408051601f1981840301815291815281516020928301206000818152600390935291205490915060ff16156102ff5760405162461bcd60e51b815260040161023b90611346565b6000818152600360205260409020805460ff1916600117905561032d6001600160a01b03871633308a610543565b600061033b878a8a866105ce565b90508060405160200161034e9190611356565b60405160208183030381529060405293505050505b9695505050505050565b6103756104bc565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556040517f50d0cbf2750e0276715bec254c588e057e0b05e87927eab7ebbad47fe1e88b4b906103cd908390611060565b60405180910390a150565b6103e06104bc565b6001600160a01b0381166104065760405162461bcd60e51b815260040161023b906113c8565b61040f816104e6565b50565b61041a6104bc565b6001600160a01b03821660009081526002602052604090205460ff16811515811515036104595760405162461bcd60e51b815260040161023b906113f2565b6001600160a01b03831660009081526002602052604090819020805460ff1916841515179055517f19df4f9d38a9b103263e051a2824d8cd9cd6dc4205d136abbd3932a9eeede061906104af9085908590611402565b60405180910390a1505050565b6000546001600160a01b0316331461020c5760405162461bcd60e51b815260040161023b9061144f565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6105c8846323b872dd60e01b8585856040516024016105649392919061145f565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610b38565b50505050565b60a08101516001546040805163457bfa2f60e01b81529051600093926001600160a01b031691829163457bfa2f916004808201926020929091908290030181865afa158015610621573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106459190611487565b6001600160a01b0316876001600160a01b03160361076757604051632e1a7d4d60e01b81526001600160a01b03881690632e1a7d4d906106899088906004016114a8565b600060405180830381600087803b1580156106a357600080fd5b505af11580156106b7573d6000803e3d6000fd5b50505050816001600160a01b0316631114cd2a86346106d691906114cc565b60808701516001546040516001600160a01b03909116906106fb908c906020016114e4565b6040516020818303038152906040528a8a606001516040518763ffffffff1660e01b8152600401610730959493929190611503565b6000604051808303818588803b15801561074957600080fd5b505af115801561075d573d6000803e3d6000fd5b50505050506108a7565b60a0840151610781906001600160a01b0389169087610bcc565b816001600160a01b0316639fbf10fc34866080015187602001518860400151600160009054906101000a90046001600160a01b03168b8b606001516040518060600160405280600081526020016000815260200160405180604001604052806002815260200161060f60f31b8152508152508f60405160200161080491906114e4565b60408051601f198184030181526020830182526000835290517fffffffff0000000000000000000000000000000000000000000000000000000060e08d901b16815261085a999897969594939290600401611594565b6000604051808303818588803b15801561087357600080fd5b505af1158015610887573d6000803e3d6000fd5b50505060a08601516108a792506001600160a01b038a1691506000610bcc565b6000816001600160a01b031663457bfa2f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090b9190611487565b6001600160a01b0316886001600160a01b0316036109ed57826001600160a01b031663a9e56f3c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610961573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109859190611487565b6001600160a01b031663e78cea926040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e69190611487565b9050610a52565b826001600160a01b031663e78cea926040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4f9190611487565b90505b6000816001600160a01b03166307968db16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab69190611487565b6080870151604051630f428ae960e31b81529192506001600160a01b03831691637a14574891610aea91869060040161162e565b602060405180830381865afa158015610b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2b9190611649565b9998505050505050505050565b6000610b8d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610c809092919063ffffffff16565b805190915015610bc75780806020019051810190610bab9190611675565b610bc75760405162461bcd60e51b815260040161023b906116f0565b505050565b801580610c455750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90610c029030908690600401611700565b602060405180830381865afa158015610c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c43919061170e565b155b610c615760405162461bcd60e51b815260040161023b90611789565b610bc78363095ea7b360e01b8484604051602401610564929190611799565b6060610c8f8484600085610c99565b90505b9392505050565b606082471015610cbb5760405162461bcd60e51b815260040161023b9061180e565b6001600160a01b0385163b610ce25760405162461bcd60e51b815260040161023b90611852565b600080866001600160a01b03168587604051610cfe9190611884565b60006040518083038185875af1925050503d8060008114610d3b576040519150601f19603f3d011682016040523d82523d6000602084013e610d40565b606091505b5091509150610d50828286610d5d565b925050505b949350505050565b60608315610d6c575081610c92565b825115610d7c5782518084602001fd5b8160405162461bcd60e51b815260040161023b9190611046565b805b811461040f57600080fd5b8035610dae81610d96565b92915050565b600060208284031215610dc957610dc9600080fd5b6000610d558484610da3565b8015155b82525050565b60208101610dae8284610dd5565b67ffffffffffffffff8116610d98565b8035610dae81610ded565b60006001600160a01b038216610dae565b610d9881610e08565b8035610dae81610e19565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610e6957610e69610e2d565b6040525050565b6000610e7b60405190565b9050610e878282610e43565b919050565b600067ffffffffffffffff821115610ea657610ea6610e2d565b601f19601f83011660200192915050565b82818337506000910152565b6000610ed6610ed184610e8c565b610e70565b905082815260208101848484011115610ef157610ef1600080fd5b610efc848285610eb7565b509392505050565b600082601f830112610f1857610f18600080fd5b8135610d55848260208601610ec3565b60008060008060008060c08789031215610f4457610f44600080fd5b6000610f508989610dfd565b9650506020610f6189828a01610e22565b9550506040610f7289828a01610da3565b9450506060610f8389828a01610e22565b935050608087013567ffffffffffffffff811115610fa357610fa3600080fd5b610faf89828a01610f04565b92505060a087013567ffffffffffffffff811115610fcf57610fcf600080fd5b610fdb89828a01610f04565b9150509295509295509295565b60005b83811015611003578181015183820152602001610feb565b838111156105c85750506000910152565b600061101e825190565b808452602084019350611035818560208601610fe8565b601f01601f19169290920192915050565b60208082528101610c928184611014565b610dd981610e08565b60208101610dae8284611057565b60006020828403121561108357611083600080fd5b6000610d558484610e22565b801515610d98565b8035610dae8161108f565b600080604083850312156110b8576110b8600080fd5b60006110c48585610e22565b92505060206110d585828601611097565b9150509250929050565b601b81526000602082017f63616c6c6572206973206e6f74206d61696e20636f6e74726163740000000000815291505b5060200190565b60208082528101610dae816110df565b8051610dae81610ded565b8051610dae81610d96565b61ffff8116610d98565b8051610dae8161113c565b8051610dae81610e19565b600060c0828403121561117157611171600080fd5b61117b60c0610e70565b905060006111898484611126565b825250602061119a84848301611131565b60208301525060406111ae84828501611131565b60408301525060606111c284828501611131565b60608301525060806111d684828501611146565b60808301525060a06111ea84828501611151565b60a08301525092915050565b600060c0828403121561120b5761120b600080fd5b6000610d55848461115c565b600e81526000602082017f696c6c6567616c20726f757465720000000000000000000000000000000000008152915061110f565b60208082528101610dae81611217565b6000610dae8260601b90565b6000610dae8261125b565b610dd961127e82610e08565b611267565b80610dd9565b6000610dae8260c01b90565b610dd967ffffffffffffffff8216611289565b60006112b48289611272565b6014820191506112c48288611272565b6014820191506112d48287611283565b6020820191506112e48286611295565b6008820191506112f48285611295565b6008820191506113048284611295565b506008019695505050505050565b600f81526000602082017f7472616e736665722065786973747300000000000000000000000000000000008152915061110f565b60208082528101610dae81611312565b60006113628284611295565b50600801919050565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015291505b5060400190565b60208082528101610dae8161136b565b600381526000602082016206e6f760ec1b8152915061110f565b60208082528101610dae816113d8565b604081016114108285611057565b610c926020830184610dd5565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152600061110f565b60208082528101610dae8161141d565b6060810161146d8286611057565b61147a6020830185611057565b610d556040830184611283565b60006020828403121561149c5761149c600080fd5b6000610d558484611151565b60208101610dae8284611283565b634e487b7160e01b600052601160045260246000fd5b600082198211156114df576114df6114b6565b500190565b60006114f08284611272565b50601401919050565b61ffff8116610dd9565b60a0810161151182886114f9565b61151e6020830187611057565b81810360408301526115308186611014565b905061153f6060830185611283565b6103636080830184611283565b805160009060608401906115608582611283565b5060208301516115736020860182611283565b506040830151848203604086015261158b8282611014565b95945050505050565b61012081016115a3828c6114f9565b6115b0602083018b611283565b6115bd604083018a611283565b6115ca6060830189611057565b6115d76080830188611283565b6115e460a0830187611283565b81810360c08301526115f6818661154c565b905081810360e083015261160a8185611014565b905081810361010083015261161f8184611014565b9b9a5050505050505050505050565b6040810161163c82856114f9565b610c926020830184611057565b60006020828403121561165e5761165e600080fd5b6000610d558484611126565b8051610dae8161108f565b60006020828403121561168a5761168a600080fd5b6000610d55848461166a565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f74207375636365656400000000000000000000000000000000000000000000602082015291506113c1565b60208082528101610dae81611696565b6040810161163c8285611057565b60006020828403121561172357611723600080fd5b6000610d558484611131565b603681526000602082017f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f81527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015291506113c1565b60208082528101610dae8161172f565b604081016117a78285611057565b610c926020830184611283565b602681526000602082017f416464726573733a20696e73756666696369656e742062616c616e636520666f81527f722063616c6c0000000000000000000000000000000000000000000000000000602082015291506113c1565b60208082528101610dae816117b4565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000008152915061110f565b60208082528101610dae8161181e565b600061186c825190565b61187a818560208601610fe8565b9290920192915050565b6000610c92828461186256fea2646970667358221220c57933341ff66d5c2346f0260999e4832000646ffb77831e65dee62de057e9f964736f6c634300080f0033",
  "deployedBytecode": "0x60806040526004361061009a5760003560e01c80639879c48d11610069578063df8bbc591161004e578063df8bbc591461019a578063f2fde38b146101ba578063f8e9c5c0146101da57600080fd5b80639879c48d1461014a578063d270e7ab1461017a57600080fd5b80633c64f04b146100a6578063715018a6146100ec578063834bc3ea146101035780638da5cb5b1461012357600080fd5b366100a157005b600080fd5b3480156100b257600080fd5b506100d66100c1366004610db4565b60036020526000908152604090205460ff1681565b6040516100e39190610ddf565b60405180910390f35b3480156100f857600080fd5b506101016101fa565b005b610116610111366004610f28565b61020e565b6040516100e39190611046565b34801561012f57600080fd5b506000546001600160a01b03165b6040516100e39190611060565b34801561015657600080fd5b506100d661016536600461106e565b60026020526000908152604090205460ff1681565b34801561018657600080fd5b5060015461013d906001600160a01b031681565b3480156101a657600080fd5b506101016101b536600461106e565b61036d565b3480156101c657600080fd5b506101016101d536600461106e565b6103d8565b3480156101e657600080fd5b506101016101f53660046110a2565b610412565b6102026104bc565b61020c60006104e6565b565b6001546060906001600160a01b031633146102445760405162461bcd60e51b815260040161023b90611116565b60405180910390fd5b60008380602001905181019061025a91906111f6565b60a08101516001600160a01b031660009081526002602052604090205490915060ff166102995760405162461bcd60e51b815260040161023b9061124b565b80516040516000916102b7918a9189918b918e9146906020016112a8565b60408051601f1981840301815291815281516020928301206000818152600390935291205490915060ff16156102ff5760405162461bcd60e51b815260040161023b90611346565b6000818152600360205260409020805460ff1916600117905561032d6001600160a01b03871633308a610543565b600061033b878a8a866105ce565b90508060405160200161034e9190611356565b60405160208183030381529060405293505050505b9695505050505050565b6103756104bc565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556040517f50d0cbf2750e0276715bec254c588e057e0b05e87927eab7ebbad47fe1e88b4b906103cd908390611060565b60405180910390a150565b6103e06104bc565b6001600160a01b0381166104065760405162461bcd60e51b815260040161023b906113c8565b61040f816104e6565b50565b61041a6104bc565b6001600160a01b03821660009081526002602052604090205460ff16811515811515036104595760405162461bcd60e51b815260040161023b906113f2565b6001600160a01b03831660009081526002602052604090819020805460ff1916841515179055517f19df4f9d38a9b103263e051a2824d8cd9cd6dc4205d136abbd3932a9eeede061906104af9085908590611402565b60405180910390a1505050565b6000546001600160a01b0316331461020c5760405162461bcd60e51b815260040161023b9061144f565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6105c8846323b872dd60e01b8585856040516024016105649392919061145f565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610b38565b50505050565b60a08101516001546040805163457bfa2f60e01b81529051600093926001600160a01b031691829163457bfa2f916004808201926020929091908290030181865afa158015610621573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106459190611487565b6001600160a01b0316876001600160a01b03160361076757604051632e1a7d4d60e01b81526001600160a01b03881690632e1a7d4d906106899088906004016114a8565b600060405180830381600087803b1580156106a357600080fd5b505af11580156106b7573d6000803e3d6000fd5b50505050816001600160a01b0316631114cd2a86346106d691906114cc565b60808701516001546040516001600160a01b03909116906106fb908c906020016114e4565b6040516020818303038152906040528a8a606001516040518763ffffffff1660e01b8152600401610730959493929190611503565b6000604051808303818588803b15801561074957600080fd5b505af115801561075d573d6000803e3d6000fd5b50505050506108a7565b60a0840151610781906001600160a01b0389169087610bcc565b816001600160a01b0316639fbf10fc34866080015187602001518860400151600160009054906101000a90046001600160a01b03168b8b606001516040518060600160405280600081526020016000815260200160405180604001604052806002815260200161060f60f31b8152508152508f60405160200161080491906114e4565b60408051601f198184030181526020830182526000835290517fffffffff0000000000000000000000000000000000000000000000000000000060e08d901b16815261085a999897969594939290600401611594565b6000604051808303818588803b15801561087357600080fd5b505af1158015610887573d6000803e3d6000fd5b50505060a08601516108a792506001600160a01b038a1691506000610bcc565b6000816001600160a01b031663457bfa2f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090b9190611487565b6001600160a01b0316886001600160a01b0316036109ed57826001600160a01b031663a9e56f3c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610961573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109859190611487565b6001600160a01b031663e78cea926040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e69190611487565b9050610a52565b826001600160a01b031663e78cea926040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4f9190611487565b90505b6000816001600160a01b03166307968db16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab69190611487565b6080870151604051630f428ae960e31b81529192506001600160a01b03831691637a14574891610aea91869060040161162e565b602060405180830381865afa158015610b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2b9190611649565b9998505050505050505050565b6000610b8d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610c809092919063ffffffff16565b805190915015610bc75780806020019051810190610bab9190611675565b610bc75760405162461bcd60e51b815260040161023b906116f0565b505050565b801580610c455750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90610c029030908690600401611700565b602060405180830381865afa158015610c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c43919061170e565b155b610c615760405162461bcd60e51b815260040161023b90611789565b610bc78363095ea7b360e01b8484604051602401610564929190611799565b6060610c8f8484600085610c99565b90505b9392505050565b606082471015610cbb5760405162461bcd60e51b815260040161023b9061180e565b6001600160a01b0385163b610ce25760405162461bcd60e51b815260040161023b90611852565b600080866001600160a01b03168587604051610cfe9190611884565b60006040518083038185875af1925050503d8060008114610d3b576040519150601f19603f3d011682016040523d82523d6000602084013e610d40565b606091505b5091509150610d50828286610d5d565b925050505b949350505050565b60608315610d6c575081610c92565b825115610d7c5782518084602001fd5b8160405162461bcd60e51b815260040161023b9190611046565b805b811461040f57600080fd5b8035610dae81610d96565b92915050565b600060208284031215610dc957610dc9600080fd5b6000610d558484610da3565b8015155b82525050565b60208101610dae8284610dd5565b67ffffffffffffffff8116610d98565b8035610dae81610ded565b60006001600160a01b038216610dae565b610d9881610e08565b8035610dae81610e19565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610e6957610e69610e2d565b6040525050565b6000610e7b60405190565b9050610e878282610e43565b919050565b600067ffffffffffffffff821115610ea657610ea6610e2d565b601f19601f83011660200192915050565b82818337506000910152565b6000610ed6610ed184610e8c565b610e70565b905082815260208101848484011115610ef157610ef1600080fd5b610efc848285610eb7565b509392505050565b600082601f830112610f1857610f18600080fd5b8135610d55848260208601610ec3565b60008060008060008060c08789031215610f4457610f44600080fd5b6000610f508989610dfd565b9650506020610f6189828a01610e22565b9550506040610f7289828a01610da3565b9450506060610f8389828a01610e22565b935050608087013567ffffffffffffffff811115610fa357610fa3600080fd5b610faf89828a01610f04565b92505060a087013567ffffffffffffffff811115610fcf57610fcf600080fd5b610fdb89828a01610f04565b9150509295509295509295565b60005b83811015611003578181015183820152602001610feb565b838111156105c85750506000910152565b600061101e825190565b808452602084019350611035818560208601610fe8565b601f01601f19169290920192915050565b60208082528101610c928184611014565b610dd981610e08565b60208101610dae8284611057565b60006020828403121561108357611083600080fd5b6000610d558484610e22565b801515610d98565b8035610dae8161108f565b600080604083850312156110b8576110b8600080fd5b60006110c48585610e22565b92505060206110d585828601611097565b9150509250929050565b601b81526000602082017f63616c6c6572206973206e6f74206d61696e20636f6e74726163740000000000815291505b5060200190565b60208082528101610dae816110df565b8051610dae81610ded565b8051610dae81610d96565b61ffff8116610d98565b8051610dae8161113c565b8051610dae81610e19565b600060c0828403121561117157611171600080fd5b61117b60c0610e70565b905060006111898484611126565b825250602061119a84848301611131565b60208301525060406111ae84828501611131565b60408301525060606111c284828501611131565b60608301525060806111d684828501611146565b60808301525060a06111ea84828501611151565b60a08301525092915050565b600060c0828403121561120b5761120b600080fd5b6000610d55848461115c565b600e81526000602082017f696c6c6567616c20726f757465720000000000000000000000000000000000008152915061110f565b60208082528101610dae81611217565b6000610dae8260601b90565b6000610dae8261125b565b610dd961127e82610e08565b611267565b80610dd9565b6000610dae8260c01b90565b610dd967ffffffffffffffff8216611289565b60006112b48289611272565b6014820191506112c48288611272565b6014820191506112d48287611283565b6020820191506112e48286611295565b6008820191506112f48285611295565b6008820191506113048284611295565b506008019695505050505050565b600f81526000602082017f7472616e736665722065786973747300000000000000000000000000000000008152915061110f565b60208082528101610dae81611312565b60006113628284611295565b50600801919050565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015291505b5060400190565b60208082528101610dae8161136b565b600381526000602082016206e6f760ec1b8152915061110f565b60208082528101610dae816113d8565b604081016114108285611057565b610c926020830184610dd5565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152600061110f565b60208082528101610dae8161141d565b6060810161146d8286611057565b61147a6020830185611057565b610d556040830184611283565b60006020828403121561149c5761149c600080fd5b6000610d558484611151565b60208101610dae8284611283565b634e487b7160e01b600052601160045260246000fd5b600082198211156114df576114df6114b6565b500190565b60006114f08284611272565b50601401919050565b61ffff8116610dd9565b60a0810161151182886114f9565b61151e6020830187611057565b81810360408301526115308186611014565b905061153f6060830185611283565b6103636080830184611283565b805160009060608401906115608582611283565b5060208301516115736020860182611283565b506040830151848203604086015261158b8282611014565b95945050505050565b61012081016115a3828c6114f9565b6115b0602083018b611283565b6115bd604083018a611283565b6115ca6060830189611057565b6115d76080830188611283565b6115e460a0830187611283565b81810360c08301526115f6818661154c565b905081810360e083015261160a8185611014565b905081810361010083015261161f8184611014565b9b9a5050505050505050505050565b6040810161163c82856114f9565b610c926020830184611057565b60006020828403121561165e5761165e600080fd5b6000610d558484611126565b8051610dae8161108f565b60006020828403121561168a5761168a600080fd5b6000610d55848461166a565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f74207375636365656400000000000000000000000000000000000000000000602082015291506113c1565b60208082528101610dae81611696565b6040810161163c8285611057565b60006020828403121561172357611723600080fd5b6000610d558484611131565b603681526000602082017f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f81527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015291506113c1565b60208082528101610dae8161172f565b604081016117a78285611057565b610c926020830184611283565b602681526000602082017f416464726573733a20696e73756666696369656e742062616c616e636520666f81527f722063616c6c0000000000000000000000000000000000000000000000000000602082015291506113c1565b60208082528101610dae816117b4565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000008152915061110f565b60208082528101610dae8161181e565b600061186c825190565b61187a818560208601610fe8565b9290920192915050565b6000610c92828461186256fea2646970667358221220c57933341ff66d5c2346f0260999e4832000646ffb77831e65dee62de057e9f964736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/bridges/StargateAdapter.sol:StargateAdapter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5683,
        "contract": "contracts/bridges/StargateAdapter.sol:StargateAdapter",
        "label": "mainContract",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5687,
        "contract": "contracts/bridges/StargateAdapter.sol:StargateAdapter",
        "label": "supportedRouters",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5691,
        "contract": "contracts/bridges/StargateAdapter.sol:StargateAdapter",
        "label": "transfers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}